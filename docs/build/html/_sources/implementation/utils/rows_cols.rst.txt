``util/rows_cols.nf``
------------------------------

columns format
..............................

A channel in columns format has one item, which is a single hashmap with keys corresponding to column names and values being lists of row values. Example:

.. code-block:: c

    columnsChannel = channel.of(["odd": [1, 3, 5], "even": [2, 4, 6]])

In rows format, we instead have one channel item per row, with keys being column names and values the row entry for that row.

.. code-block:: c

    rowsChannel = channel.of([["odd": 1, "even": 2], ["odd": 3 "even": 4], ["odd": 5, "even": 6]])

columns
..............................

Converts a channel from rows format to columns format.

.. code-block:: c

    def columns (mapList, options = [:]) {
        // Get set of all keys from all maps
        def allKeys = mapList.collectMany{
            it.keySet()
        }.toSet()

        // Extract parameters to list
        def transposed = [:]

        // Iterate through all maps in the mapList
        mapList.each {
            map ->

            // Iterate through all keys from all maps
            allKeys.each {
                key ->

                /* For each key, get the current map's value or a default if supplied.
                Verify the value is non-null/missing or is OK to be null.
                Add it to the previous value list and update the transposed map.
                */
                def value = map.get(key, options.defaults?[(key)])
                if (value != null || !options.dropNull) {
                    def previous = transposed.get(key, [])
                    assert value != null || options.nullOK?.contains(key), "In call to 'columns' without dropNull, '${key}' is not in nullOK, and is missing/null for:\n${map}"
                    def valueList = previous + [value]
                    def updatedItem = [(key): valueList]
                    transposed += updatedItem
                }
            }
        }

        // Return the transposed map
        transposed
    }

rows
..............................

Converts a channel from columns format to rows format.

.. code-block:: c

    def rows (columnsMap) {
        /*
            Arguments
                columnsMap: map[str, ArrayList | Any] -- A channel containing key names
                associated with lists of per-sample values to be converted to a row format
        */

        // Get the keys and the transposed values
        def keys = columnsMap.keySet().toList()  
        def values = columnsMap.values().toList()

        // Ensure all values are lists
        def formattedValues = values.collect({it instanceof ArrayList ? it : [it]})

        // This converts the column format of the values to row format
        // https://docs.groovy-lang.org/latest/html/groovy-jdk/java/util/List.html#transpose()
        def transposed = formattedValues.transpose()

        // Create N hashmaps, each containing the values at index i for the corresponding keys
        def result = transposed.collect {
            row ->
            // Keys and row are equal-length lists which are transposed into a list of individual
            // key value pairs like [[key1: value1], [key2: value2]]. collectEntries converts
            // this to a single map like [key1: value1, key2: value2]
            [keys, row].transpose().collectEntries()
        }

        result
    }

rowHashmapToColumnChannel
..............................

Convert a Groovy hashmap to a column channel so that its keys are in the ``[keyCol]`` channel and values in the ``[valueCol]`` channel so the index of each key and its corresponding value are at the same index.

.. code-block:: c

    def rowHashmapToColumnChannel (hashMap, keyCol, valueCol) {
        // Treat key-value pairs of hashMap as row entries in a two-column table and emit in column format
        (
            channel.of(params.aggregationPlans)
            | map {
                [
                    (keyCol): hashMap.keySet().toList(), 
                    (valueCol): hashMap.values().toList()
                ]
            }
        )
    }

rowHashmapToRowChannel
..............................

Convert a Groovy hashmap to a row channel structured as ``[keyCol]: [key], [valueCol]: [value]``, where ``[key]`` is a particular key from the original hashmap and ``[value]`` is the corresponding value.

.. code-block:: c

    def rowHashmapToRowChannel (hashMap, keyCol, valueCol) {
        // Treat key-value pairs of hashMap as row entries in a two-column table and emit in row format
        rowHashmapToColumnChannel(hashMap, keyCol, valueCol) | map{rows(it)} | flatten
    }

