apptainer.enabled = true

profiles {
    localPC {
        executor.name = 'local'
        executor.cpus = 8
        executor.memory = 18.GB
        process.executor = 'local'

        withLabel: whenLocal_allConsuming {
            maxForks = 1
            cpus = 8
            memory = 18.GB
        }
    }

    localHPC {
        executor.name = 'local'
        executor.cpus = 80
        executor.memory = 180.GB
        process.executor = 'local'

        withLabel: whenLocal_allConsuming {
            maxForks = 1
            cpus = 50
            memory = 180.GB
        }
    }

    jobArray {
        withLabel: doJobArray {
            array = 20
        }
    }

    grid {
        withLabel: align {
            time = '36hr'
            cpus = 24
        }

        withLabel: index {
            time = '36hr'
            cpus = 24
        }

        withLabel: smallResource {
            time = '4hr'
            cpus = 8
            memory = 8.GB
        }

        withLabel: pairs {
            time = '16hr'
            cpus = 8
            memory = 8.GB
        }

        withLabel: createMatrix {
            time = '36hr'
            cpus = 8
            memory = 16.GB
        }
    }
}

process {
    withLabel: 'embarassinglyParallel' {
        cpus = 5
    }
}



params {
    //lastStep = "align"
    sampleFile = "samples.tsv"
    sampleFileSep = "\t"
    humid = null

    general {
        publish {
            // Nextflow publishDir param for all processes
            // https://www.nextflow.io/docs/latest/process.html#publishdir
            mode = "copy"

            // Where to publish results of Hich processes
            genomeReference = "resources/hich/genomeReference"
            chromsizes = "resources/hich/chromsizes"
            bwa_mem2Index = "resources/hich/bwa-mem2"
            bwaIndex = "resources/hich/bwa"
            fragmentIndex = "resources/hich/fragmentIndex"

            align = "results/align"
            parse = "results/pairs/parse"
            dedup = "results/pairs/dedup"
            mcool = "results/matrix/mcool"
            hic = "results/matrix/hic"
            pairStats = "results/pairStats"
            qc = "results/qc"
        }
        
        // After these steps, generate read-level pairs 
        // stats files and generate a combined MultiQC report
        // for all samples at each processing stage
        qcAfter = ["Parse",
                    "IngestPairs",
                    "TagFragments",
                    "TechrepsToBioreps",
                    "Deduplicate",
                    "BiorepsToConditions",
                    "Select"]
        
        // Number of reads to downsample to by default for a humid run
        // can also be specified simply via --humid 100000 or similar
        humidDefault = 100000
    }

    comparisonSets {
        hicrep {
            p1 {
                resolutions = [100000, 1000000]
                chroms = []
                exclude = ["chrY", "chrM"]
                chromFilter = "chrom if size > 5000000 else None"
                h = [1]
                dBPMax = [-1]
                bDownSample = [false]
            }
            p2 {
                resolutions = [100000, 1000000]
                chroms = []
                exclude = ["chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chrY", "chrM"]
                chromFilter = "chrom if size > 5000000 else None"
                h = [1]
                dBPMax = [-1]
                bDownSample = [false]
            }
        }

        mustacheLoops {
            mustacheLoops1 {
                mustacheParams = [
                "--resolution 1000000",
                "--chromosome chr22",
                "--pThreshold .1",
                "--sparsityThreshold .88"
                ]
            }
        }

        aggregateProfiles {
            // raw {
            //     dedupSingleCell = false
            //     dedupMaxMismatch = 3
            //     dedupMethod = 'max'
            //     techrepDedup = true
            //     biorepDedup = true
            //     conditionDedup = false
            //     mergeTechrepToBiorep = true
            //     mergeBiorepToCondition = true

            // }
            profile1 {
                dedupSingleCell = false
                dedupMaxMismatch = 3
                dedupMethod = 'max'
                techrepDedup = true
                biorepDedup = true
                conditionDedup = false
                techrepCisStrata = [1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000, 2000000, 5000000]
                techrepReadConjuncts = ['chr1', 'chr2', 'pair_type', 'stratum']
                techrepDownsampleToMeanDistribution = ['biorep']
                mergeTechrepToBiorep = true
                mergeBiorepToCondition = true
                techrepDownsampleToSize = .5
            }
        }
    }

    defaults {
        techrep = 1
        biorep = 1
        minMapq = 30


        
        /*
           Note: Do not include a default sample datatype.
           The datatype is inferred during sample ingestion.
        */
        
        deduplicate = true

        aligner = "bwa-mem2"
        alignerThreads = 10
        bwaFlags = "-SP5M"

        /*
           Default for extracting the cell barcode for each read and putting it in the column cellID.
           This is done with `hich reshape`. Defaults are only applied for a given sample if
           cellBarcodeField is specified  and there is no cellBarcodeRegexPattern or cellBarcodeParsePattern.
           If cellBarcodeField is readID and --drop-readid is specified, then the readID column is dropped
           AFTER parsing and reshaping, the last action taken by hich reshape.

           Note that globalDefaultReshapeToCellID should not be used in id-specific ConfigMap bundles.
           Specify a value of reshapeParams instead for id-specific ConfigMap bundles.

           Note that parsing the cellBarcodeField to the cellID column happens first, before any other reshapeParams
           options are applied. For more control over the order of hich reshape flags, specify id-specific reshapeParams
           ConfigMap bundles in params, after the params.defaults ConfigMap bundle.

           Also, note that patterns (regex and parse) will be automatically wrapped in quotes
           when processed during UpdateSamples.
        */
         
        reshapeParams = []
        globalDefaultReshapeToCellID = ["option":"--regex", "pattern":"^(.*?):.*", "group":1]

        pairsFormat {
            chrom1 = 2
            pos1 = 3
            chrom2 = 4
            pos2 = 5
        }

        parseParams = [
           "--flip",
           "--min-mapq 30",
           "--drop-readid",
           "--drop-seq",
           "--drop-sam"
        ]

        reshapeParams = []

        pairtoolsDedupParams = []

        pairtoolsSelectParams = []
            
        selectFilters {
            keepPairTypes = ["UU", "RU", "UR"]
            keepTrans = true
            keepCis = true
            minDistFR = 1000
            minDistRF = 1000
            minDistFF = 0
            minDistRR = 0

            chroms = ["chr1", "chr2", "chr3", "chr4", "chr5", "chr6",
                        "chr7", "chr8", "chr9", "chr10", "chr11", "chr12",
                        "chr13", "chr14", "chr15", "chr16", "chr17", "chr18",
                        "chr19", "chr20", "chr21", "chr22", "chrX"]
            
            discardSingleFrag = true
        }

        hichStatsParams = ["--conjuncts 'record.chr1 record.chr2 stratum'"]

        juicerToolsPreParams = []

        coolerCloadParams = []

        coolerZoomifyParams = [
            "--balance",
            "--balance-args '--max-iters 2000 --trans-only'",
            "--nproc 10"
        ]

        matrix {
            makeMcoolFileFormat = true
            makeHicFileFormat = true
            resolutions = [100000, 1000000]
        }

        hicrep = ["p1", "p2"]
        mustacheLoops = ["mustacheLoops1"]

        compartments {
            resolution = 100000
            hichCompartmentsParams = [
                "--n_eigs 3"
            ]
        }

        insulation {
            resolution = 100000
            cooltoolsInsulationParams = [
                "--bigwig"
            ]
        }        
    }

    // Create id-specific bundles starting here. Any samples matching the ids list
    // for a particular bundle will have their previous values (specified in sample file or by the defaults
    // second) replaced by the values here. Multiple id-specific bundles can be created.
    // Each must have a name preceding {},
    // and list the ids to which they apply as ids = [sample ids].
    // This is an empty ConfigMap bundle as a starting point.
    // These are applied during the UpdateSamples workflow in setup.nf
    emptyBundle {
        ids = []
    }
}
