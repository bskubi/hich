params {
    defaults {
        techrep = "1"
        biorep = "1"

        // Since this is used in multiple steps, it will be used as the default value for each sample
        // unless an algorithm-specific setting is declared (i.e. parseParams with "--min-mapq 40")
        minMapq = 30
        
        aligner = "bwa"

        // Options that Hich formats from sample attributes and should not be specified in bwaFlags:
        // -t (obtained from the Nextflow resource profile)
        // For BSBolt, -OT, -O, -DB, -F1, -F2
        bwaFlags = ["-S", "-P", "-5", "-M"]

        // Default for extracting the cell barcode for each read and putting it in the column cellID.
        // This is done with `hich reshape`. Defaults are only applied for a given sample if
        // cellBarcodeField is specified and there is no cellBarcodeRegexPattern or cellBarcodeParsePattern.
        // If cellBarcodeField is readID and --drop-readid is specified, then the readID column is dropped
        // AFTER parsing and reshaping, the last action taken by hich reshape.
        //
        // Note that globalDefaultReshapeToCellID should not be used in id-specific ConfigMap bundles.
        // Specify a value of reshapeParams instead for id-specific ConfigMap bundles.
        //
        // Note that parsing the cellBarcodeField to the cellID column happens first, before any other reshapeParams
        // options are applied. For more control over the order of hich reshape flags, specify id-specific reshapeParams
        // ConfigMap bundles in params, after the params.defaults ConfigMap bundle.
        //
        // Also, note that patterns (regex and parse) will be automatically wrapped in quotes
        // when processed during UpdateSamples.

        reshapeParams = []
        globalDefaultReshapeToCellID = [
            [option: "--regex", pattern: "^(.*?):.*", group: 1]
        ]

        // Options that Hich formats from sample attributes and should not be specified in pairtoolsParse2Params:
        // --nproc-in, --nproc-out, --assembly, --chroms-path
        pairtoolsParse2Params = [
            "--drop-readid",
            "--drop-seq",
            "--drop-sam"
        ]

        // Options that Hich formats from sample attributes and should not be specified in pairtoolsDedupParams:
        // --nproc-in, --nproc-out
        pairtoolsDedupParams = []

        // Options that Hich formats from sample attributes and should not be specified in pairtoolsSelectParams:
        // --nproc-in, --nproc-out
        pairtoolsSelectParams = []

        pairtoolsSelectFilters {
            keepPairTypes = ["UU", "RU", "UR"]
            keepTrans = true
            keepCis = true
            minDistFR = 1000
            minDistRF = 1000
            minDistFF = 1000
            minDistRR = 1000
            discardSingleFrag = true
        }

        // Default matrix-calling parameters. juicerToolsPreParams, coolerCloadParams and coolerZoomifyParams have
        // priority over params specified in the matrix section, although a matrix will not be created if
        // makeMcoolFileFormat or makeHicFileFormat is false, even if params are specified in
        // juicerToolsPreParams, coolerCloadParams, or coolerZoomifyParams.
        // If you specify --resolutions or -r in coolerZoomifyParams, the smallest (highest-resolution)
        // bin size will be extracted from that parameter and used in cooler cload to build the starting matrix.
        matrix {
            makeMcoolFileFormat = true
            makeHicFileFormat = true
            resolutions = [1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000]
        }

        juicerToolsPreParams = []

        coolerCloadParams = ["--chrom1 2", "--pos1 3", "--chrom2 4", "--pos2 5"]

        coolerZoomifyParams = ["--balance", "--balance-args '--max-iters 2000 --trans-only'"]
    }

    // Aggregation plans define how samples are split, merged, downsampled and deduplicated
    aggregate {
        // Each key under aggregate is the name of an aggregation profile
        fullCoverageDedup {
            dedup = true
            mergeTechrepToBiorep = true
            mergeBiorepToCondition = true
        }
    }

    sampleSelectionStrategies {
        test {
            techrep = "1"
        }
    }

    hicrep {
        hicrep_default {
            sampleSelectionStrategy = "test"
            resolutions = [10000]
            chroms = ["chr1", "chr2", "chr3"]
            exclude = ["chr3"]
            chromFilter = []
            h = [1]
            dBPMax = [5000000]
            bDownSample = [true]
        }
    }

    loops {
        loops_default {
            sampleSelectionStrategy = "test"
            mustacheParams = "-r 100000"
        }
    }

    differentialLoops = []

    insulation {
        insulation_default {
            sampleSelectionStrategy = "test"
            resolution = 100000
            cooltoolsInsulationParams = ""
            window = 100000
        }
    }

    compartments {
        hich_compartments_default {
            sampleSelectionStrategy = "test"
            hichCompartmentsParams = "--view ../../../resources/hich/chromsizes/chr1.view --clr-weight-name"
            resolution = 100000
        }
    }


    sampleFileSep = "\t"
    humid = null

    general {

        hichContainer = "bskubi/hich:latest"
        chromsizesContainer = 'quay.io/biocontainers/ucsc-fasize:332--0'
        mustacheContainer = "bskubi/mustache:latest"
        juicerContainer = "bskubi/juicer_tools:1.22.01"
        hictkContainer = "ghcr.io/paulsengroup/hictk:1.0.0"

        publish {
            // Nextflow publishDir param for all processes
            // https://www.nextflow.io/docs/latest/process.html#publishdir
            mode = "link"

            // Where to publish results of Hich processes
            genomeReference = "resources/hich/genomeReference"
            chromsizes = "resources/hich/chromsizes"
            bwaMem2Index = "resources/hich/bwa-mem2"
            bwaIndex = "resources/hich/bwa"
            bsboltIndex = "resources/hich/bsbolt"
            fragmentIndex = "resources/hich/fragmentIndex"

            align = "results/align"
            parse = "results/pairs/parse"
            dedup = "results/pairs/dedup"
            mcool = "results/matrix/mcool"
            hic = "results/matrix/hic"
            pairStats = "results/pairStats"
            qc = "results/qc"
        }
        
        // After these steps, generate read-level pairs 
        // stats files and generate a combined MultiQC report
        // for all samples at each processing stage
        qcAfter = ["parse",
                    "ingestPairs",
                    "tagRestrictionFragments",
                    "select",
                    "aggregate"]
        
        // Number of reads to downsample to by default for a humid run
        // can also be specified simply via --humid 100000 or similar
        humidDefault = 100000
    }
}

profiles {
    localPC {
        executor.name = 'local'
        executor.cpus = 10
        executor.memory = 20.GB
        process.executor = 'local'
        
        process {
            withLabel: whenLocal_allConsuming {
                maxForks = 1
                cpus = 10
                memory = 20.GB
            }

            withLabel: smallResource {
                cpus = 8
                memory = 8.GB
            }

            withLabel: pairs {
                cpus = 8
                memory = 8.GB
            }

            withLabel: createMatrix {
                cpus = 10
                memory = 16.GB
            }

            withLabel: convertMcoolToHic {
                cpus = 10
                memory = 20.GB
            }

            withLabel: convertHicToMcool {
                cpus = 2
                memory = 20.GB
            }

            withLabel: features {
                cpus = 5
                memory = 10.GB
            }
        }

    }

    testLocalHPC {
        executor.name = 'local'
        executor.cpus = 24
        executor.memory = 100.GB
        process.executor = 'local'

        process {
            withLabel: whenLocal_allConsuming {
                maxForks = 1
                cpus = 24
                memory = 100.GB
            }

            withLabel: smallResource {
                cpus = 8
                memory = 8.GB
            }

            withLabel: pairs {
                cpus = 8
                memory = 8.GB
            }

            withLabel: createMatrix {
                cpus = 24
                memory = 16.GB
            }

            withLabel: convertMcoolToHic {
                cpus = 20
                memory = 20.GB
            }

            withLabel: convertHicToMcool {
                cpus = 2
                memory = 20.GB
            }

            withLabel: features {
                cpus = 6
                memory = 12.GB
            }
        }

    }

    localHPC {
        executor.name = 'local'
        executor.cpus = 100
        executor.memory = 200.GB
        process.executor = 'local'

        process {
            withLabel: whenLocal_allConsuming {
                maxForks = 1
                cpus = 100
                memory = 200.GB
            }

            withLabel: smallResource {
                cpus = 8
                memory = 8.GB
            }

            withLabel: pairs {
                cpus = 8
                memory = 8.GB
            }

            withLabel: createMatrix {
                cpus = 24
                memory = 16.GB
            }

            withLabel: convertMcoolToHic {
                cpus = 20
                memory = 20.GB
            }

            withLabel: convertHicToMcool {
                cpus = 2
                memory = 20.GB
            }

            withLabel: features {
                cpus = 5
                memory = 10.GB
            }
        }

    }

    jobArray {
        process {
            withLabel: doJobArray {
                array = 20
            }
        }
    }

    grid {
        process {
            withLabel: align {
                time = '36hr'
                cpus = 24
            }

            withLabel: index {
                time = '36hr'
                cpus = 24
            }

            withLabel: smallResource {
                time = '4hr'
                cpus = 8
                memory = 8.GB
            }

            withLabel: pairs {
                time = '16hr'
                cpus = 8
                memory = 8.GB
            }

            withLabel: createMatrix {
                time = '36hr'
                cpus = 8
                memory = 16.GB
            }

            withLabel: convertHicToMcool {
                cpus = 2
                memory = 8.GB
            }

            withLabel: convertMcoolToHic {
                cpus = 20
                memory = 8.GB
            }
        }
    }
}
