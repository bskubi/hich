nextflow_workflow {

    name "Test Workflow AlignerIndex"
    script "contents/subwf/resources/alignerIndex.nf"
    workflow "AlignerIndex"

    test("SmokeTest_AlignerIndex_Full") {
        tag "3to10s"

        when {
            params {
            }
            workflow {
                """
                common = [
                    datatype: "fastq", 
                    alignerIndexDir: null, 
                    alignerIndexPrefix: null, 
                    assembly: "M129", 
                    genomeReference: file("$projectDir/tests/assets/genomeReference/M129.fa.gz"),
                    fastq1: file("$projectDir/tests/assets/fastq/1k/1k_ERR1413593_1.fq.gz"), 
                    fastq2: file("$projectDir/tests/assets/fastq/1k/1k_ERR1413593_2.fq.gz")
                ]

                bwameth_1 = common + [id: "bwameth_1", aligner: "bwameth"]
                bwameth_2 = common + [id: "bwameth_2", aligner: "bwameth"]
                bwamethMem2_1 = common + [id: "bwamethMem2_1", aligner: "bwameth-mem2"]
                bwamethMem2_2 = common + [id: "bwamethMem2_2", aligner: "bwameth-mem2"]
                bwa_1 = common + [id: "bwa_1", aligner: "bwa"]
                bwa_2 = common + [id: "bwa_2", aligner: "bwa"]
                bwaMem2_1 = common + [id: "bwaMem2_1", aligner: "bwa-mem2"]
                bwaMem2_2 = common + [id: "bwaMem2_2", aligner: "bwa-mem2"]
                input[0] = channel.of(
                    bwa_1,
                    bwa_2,
                    bwaMem2_1,
                    bwaMem2_2,
                    bwameth_1,
                    bwameth_2,
                    bwamethMem2_1,
                    bwamethMem2_2
                )
                """
            }
        }

        then {
            assert workflow.success
            with (workflow.out) {
                result = samples.collect{it.subMap(["id", "aligner", "alignerIndexDir", "alignerIndexPrefix"])}
                result = result.collect{it.subMap(["id", "aligner", "alignerIndexPrefix"]) + [alignerIndexDir: it.alignerIndexDir.split("/")[-1]]}
                expected = [
                    [id: "bwa_1", aligner: "bwa", alignerIndexDir: "bwa", alignerIndexPrefix: "M129"],
                    [id: "bwa_2", aligner: "bwa", alignerIndexDir: "bwa", alignerIndexPrefix: "M129"],
                    [id: "bwaMem2_1", aligner: "bwa-mem2", alignerIndexDir: "bwa-mem2", alignerIndexPrefix: "M129"],
                    [id: "bwaMem2_2", aligner: "bwa-mem2", alignerIndexDir: "bwa-mem2", alignerIndexPrefix: "M129"],
                    [id: "bwameth_1", aligner: "bwameth", alignerIndexDir: "bwameth", alignerIndexPrefix: "M129"],
                    [id: "bwameth_2", aligner: "bwameth", alignerIndexDir: "bwameth", alignerIndexPrefix: "M129"],
                    [id: "bwamethMem2_1", aligner: "bwameth-mem2", alignerIndexDir: "bwameth-mem2", alignerIndexPrefix: "M129"],
                    [id: "bwamethMem2_2", aligner: "bwameth-mem2", alignerIndexDir: "bwameth-mem2", alignerIndexPrefix: "M129"]
                ]

                assertContainsInAnyOrder(result, expected)
            }
            
        }
    }

}
