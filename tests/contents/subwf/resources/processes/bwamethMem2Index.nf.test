nextflow_process {

    name "Test Process BwamethMem2Index"
    script "contents/subwf/resources/processes/bwamethMem2Index.nf"
    process "BwamethMem2Index"

    test("stubBwamethMem2Index") {
        options """-stub-run"""
        tag "priority1"
        tag "stubAlignerIndex"

        when {
            params {
            }
            process {
                """
                input[0] = tuple("hg38_chr19", file("$projectDir/tests/assets/hg38_chr19.fa.gz"), "hg38_chr19")
                """
            }
        }

        then {
            assert process.success
            with (process) {
                def out = out[0][0]
                assert out[0] == "hg38_chr19"
                assert out[1].endsWith("/bwameth-mem2/index")
                assert out[2] == "hg38_chr19"
                assert out[3].endsWith("/bwameth-mem2/index/hg38_chr19.c2t")
                assert out[4].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.amb")
                assert out[5].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.ann")
                assert out[6].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.bwt.2bit.64")
                assert out[7].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.pac")
                assert out[8].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.0123")
            }
        }
    }

    test("fullBwamethMem2Index") {
        tag "priority4"
        tag "fullAlignerIndex"

        when {
            params {
            }
            process {
                """
                input[0] = tuple("hg38_chr19", file("$projectDir/tests/assets/chr19.fa.gz"), "hg38_chr19")
                """
            }
        }

        then {
            assert process.success
            with (process) {
                def out = out[0][0]
                assert out[0] == "hg38_chr19"
                assert out[1].endsWith("/bwameth-mem2/index")
                assert out[2] == "hg38_chr19"
                assert out[3].endsWith("/bwameth-mem2/index/hg38_chr19.c2t")
                assert out[4].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.amb")
                assert out[5].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.ann")
                assert out[6].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.bwt.2bit.64")
                assert out[7].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.pac")
                assert out[8].endsWith("/bwameth-mem2/index/hg38_chr19.c2t.0123")
            }
        }
    }

}
