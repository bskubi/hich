nextflow_workflow {

    name "Test Workflow Align"
    script "contents/subwf/reads/Align/workflow.nf"
    workflow "Align"
    
    test("SmokeTest_Align") {
        options """-profile localPC"""
        tag "priority3"

        when {
            params {
                
            }
            workflow {
                """
                std1 = file("$projectDir/tests/assets/fastq/1k/1k_Formaldehyde+DSG_DdeI_and_DpnII_HFFc6_BR1_TR1_R1.fastq.gz")
                std2 = file("$projectDir/tests/assets/fastq/1k/1k_Formaldehyde+DSG_DdeI_and_DpnII_HFFc6_BR1_TR1_R2.fastq.gz")
                stdInterleaved = file("$projectDir/tests/assets/fastq/1k/1k_Formaldehyde+DSG_DdeI_and_DpnII_HFFc6_BR1_TR1_R2.fastq.gz")
                met1 = file("$projectDir/tests/assets/fastq/1k/1k_CEMBA3C_18B3C_R2_P5-2-M17-L15.R1.fastq.gz")
                met2 = file("$projectDir/tests/assets/fastq/1k/1k_CEMBA3C_18B3C_R2_P5-2-M17-L15.R2.fastq.gz")
                metInterleaved = file("$projectDir/tests/assets/fastq/1k/1k_CEMBA3C_18B3C_R2_P5-2-M17-L15_interleaved.fastq.gz")
                common = [
                    datatype: "fastq",
                    minMapq: 30
                ]
                bwaFlags = ["-S": true, "-P": true, "-5": true, "-M": true, "-p": true]
                bwamethFlags = ["--do-not-penalize-chimeras": true, "-p": true]

                bwa = [aligner: "bwa", alignerIndexDir: file("$projectDir/resources/hich/bwa/bwa/index"), bwaFlags: bwaFlags, alignerIndexPrefix: "hg38",]
                bwaMem2 = [aligner: "bwa-mem2", alignerIndexDir: file("$projectDir/resources/hich/bwa-mem2/bwa-mem2/index"), bwaFlags: bwaFlags, alignerIndexPrefix: "hg38",]
                bwameth = [aligner: "bwameth", alignerIndexDir: file("$projectDir/resources/hich/bwameth/bwameth/index"), bwaFlags: bwamethFlags, alignerIndexPrefix: "mm10"]
                bwamethMem2 = [aligner: "bwameth-mem2", alignerIndexDir: file("$projectDir/resources/hich/bwameth-mem2/bwameth-mem2/index"), bwaFlags: bwamethFlags, alignerIndexPrefix: "mm10"]
                stdPaired = [fastq1: std1, fastq2: std2]
                stdSingle = [fastq: std1]
                stdInterleaved = [fastq: stdInterleaved]
                metPaired = [fastq1: met1, fastq2: met2]
                metSingle = [fastq: met1]
                metInterleaved = [fastq: metInterleaved]

                samples = [
                    common + bwa + stdPaired + [id: "1"],
                    common + bwa + stdSingle + [id: "2"],
                    common + bwa + stdInterleaved + [id: "3"],
                    common + bwaMem2 + stdPaired + [id: "4"],
                    common + bwaMem2 + stdSingle + [id: "5"],
                    common + bwaMem2 + stdInterleaved + [id: "6"],
                    common + bwameth + metPaired + [id: "7"],
                    common + bwameth + metSingle + [id: "8"],
                    common + bwameth + metInterleaved + [id: "9"],
                    /*
                    common + bwamethMem2 + metPaired + [id: "10"],
                    common + bwamethMem2 + metSingle + [id: "11"],
                    common + bwamethMem2 + metInterleaved + [id: "12"]
                    */
                ]
                input[0] = channel.fromList(samples)
                """
            }
        }

        then {
            assert workflow.success
            /*
            with (workflow.out) {
                assert samples.size() == 12
                sambams = samples.collect{it.sambam.split("/")[-1]}

                assertContainsInAnyOrder(sambams, [
                    "1.bam",
                    "2.bam",
                    "3.bam",
                    "4.bam",
                    "5.bam",
                    "6.bam",
                    "7.bam",
                    "8.bam",
                    "9.bam",
                    "10.bam",
                    "11.bam",
                    "12.bam"
                ])
            }
            */
        }

    }

}
